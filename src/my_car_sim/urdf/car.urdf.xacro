<?xml version="1.0"?>
<robot name="my_car" xmlns:xacro="http://www.ros.org/wiki/xacro">

  <!-- Properties -->
  <xacro:property name="chassis_length" value="0.5"/>
  <xacro:property name="chassis_width" value="0.3"/>
  <xacro:property name="chassis_height" value="0.1"/>
  <xacro:property name="wheel_radius" value="0.05"/>
  <xacro:property name="wheel_width" value="0.04"/>
  <xacro:property name="wheel_mass" value="0.5"/>
  <xacro:property name="chassis_mass" value="5.0"/>

  <!-- Chassis -->
  <link name="base_link">
    <inertial>
      <mass value="${chassis_mass}"/>
      <origin xyz="0 0 ${chassis_height/2}" rpy="0 0 0"/>
      <inertia ixx="${chassis_mass/12 * (chassis_width*chassis_width + chassis_height*chassis_height)}" 
               ixy="0" ixz="0"
               iyy="${chassis_mass/12 * (chassis_length*chassis_length + chassis_height*chassis_height)}" 
               iyz="0"
               izz="${chassis_mass/12 * (chassis_length*chassis_length + chassis_width*chassis_width)}"/>
    </inertial>
    <collision>
      <origin xyz="0 0 ${chassis_height/2}" rpy="0 0 0"/>
      <geometry>
        <box size="${chassis_length} ${chassis_width} ${chassis_height}"/>
      </geometry>
    </collision>
    <visual>
      <origin xyz="0 0 ${chassis_height/2}" rpy="0 0 0"/>
      <geometry>
        <box size="${chassis_length} ${chassis_width} ${chassis_height}"/>
      </geometry>
      <material name="blue">
        <color rgba="0 0 0.8 1"/>
      </material>
    </visual>
  </link>
  
  <!-- Gazebo material -->
  <gazebo reference="base_link">
    <material>Gazebo/Blue</material>
  </gazebo>

  <!-- Wheel Macro -->
  <xacro:macro name="wheel" params="name x y z">
    <link name="${name}_wheel">
      <inertial>
        <mass value="${wheel_mass}"/>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        <inertia ixx="${wheel_mass * (3*wheel_radius*wheel_radius + wheel_width*wheel_width)/12}" 
                 ixy="0" ixz="0"
                 iyy="${wheel_mass * (3*wheel_radius*wheel_radius + wheel_width*wheel_width)/12}" 
                 iyz="0"
                 izz="${wheel_mass * wheel_radius*wheel_radius/2}"/>
      </inertial>
      <collision>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
      </collision>
      <visual>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
        <material name="black">
          <color rgba="0 0 0 1"/>
        </material>
      </visual>
    </link>
    
    <gazebo reference="${name}_wheel">
      <material>Gazebo/Black</material>
    </gazebo>
    
    <joint name="${name}_wheel_joint" type="continuous">
      <parent link="base_link"/>
      <child link="${name}_wheel"/>
      <origin xyz="${x} ${y} ${z}" rpy="0 0 0"/>
      <axis xyz="0 1 0"/>
      <dynamics damping="0.1" friction="0.1"/>
    </joint>
  </xacro:macro>

  <!-- Create wheels -->
  <xacro:wheel name="front_left" x="${chassis_length/4}" y="${chassis_width/2 + wheel_width/2}" z="${wheel_radius}"/>
  <xacro:wheel name="front_right" x="${chassis_length/4}" y="-${chassis_width/2 + wheel_width/2}" z="${wheel_radius}"/>
  <xacro:wheel name="rear_left" x="-${chassis_length/4}" y="${chassis_width/2 + wheel_width/2}" z="${wheel_radius}"/>
  <xacro:wheel name="rear_right" x="-${chassis_length/4}" y="-${chassis_width/2 + wheel_width/2}" z="${wheel_radius}"/>

  <!-- Add Gazebo plugin for SimulatedDifferentialDrive -->
  <gazebo>
    <plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">
      <legacyMode>false</legacyMode>
      <alwaysOn>true</alwaysOn>
      <updateRate>20</updateRate>
      <leftJoint>front_left_wheel_joint</leftJoint>
      <rightJoint>front_right_wheel_joint</rightJoint>
      <wheelSeparation>${chassis_width + wheel_width}</wheelSeparation>
      <wheelDiameter>${2*wheel_radius}</wheelDiameter>
      <torque>50</torque>
      <commandTopic>cmd_vel</commandTopic>
      <odometryTopic>odom</odometryTopic>
      <odometryFrame>odom</odometryFrame>
      <robotBaseFrame>base_link</robotBaseFrame>
    </plugin>
  </gazebo>
  
</robot>
